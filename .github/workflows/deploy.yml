name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          VITE_SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          VITE_SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist/public'

      - name: Create Deployment Status
        id: deployment_status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            // Create deployment
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: sha,
              environment: 'github-pages',
              auto_merge: false,
              required_contexts: [],
            });

            // Set deployment status to in_progress
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              environment_url: `https://${owner}.github.io/${repo}/`,
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
            });

            return deployment.data.id;

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const deployment_id = ${{ needs.build.outputs.deployment_id }};

            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success' ? 'Deployment completed successfully' : 'Deployment failed';

            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id,
              state,
              description,
              environment_url: `https://${owner}.github.io/${repo}/`,
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
            });